%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Node: autonomy
%
% Purpose:  
% The purpose of the autonomy node is to generate, monitor, and manipulate 
% a queue of behaviors that define mission and safety objectives. The 
% behaviors are initially specified in a mission configuration file that is 
% read by the autonomy node at the start of a run. Each behavior is used to
% accomplish a specific task by generating appropriate 'ahsCommands' of 
% [altitude, heading, forward speed, crab speed] to be used as setpoints
% by the control node. A single behavior might only generate a subset of 
% such commands. The functionality of each behavior will be encapsulated in 
% a .m file with the prefix: BHV_ .
% 
% Examples of mission behaviors include:
%   - BHV_Takeofff 
%   - BHV_ConstantAltitude
%   - BHV_ConstantHeadingSpeed
%   - BHV_PositionHold
%   - BHV_Land
%   - BHV_FollowWpts
%   - BHV_KeepTargetCentered 
%
% Examples of safety behaviors include:
%   - BHV_LowBatteryLanding
%   - BHV_OpRegion
%   - BHV_AvoidObstacle
%
% A behavior manager will monitor the progress of each behavior. When the
% behavior (or set of behaviors) indicate they are 'complete' they will 
% become inactive and the next set of behaviros in the mission will become 
% active. Safety behaviors will be used to over-ride existing mission
% behaviors in emergency situations.
%
% The autonomy node may also perform some other relevant services such as
% path planning.
%
% Input: 
%   - ROS topic: /stateEstimate (generated by estimation)
%   - ROS topic: /features (generated by vision)
%   
% Output:
%   - ROS topic: /ahsCmd (used by control)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% prepare workspace
clear; close all; clc; format compact;
addpath('../')
params = loadParams();
mission = loadMission();

fprintf('Launching Autonomy Node...\n');
autonomyParams = params.autonomy;

global stateEstimateMsg;
global timestamps

% initialize ROS
if(~robotics.ros.internal.Global.isNodeActive)
    rosinit;
end
    
autonomyNode = robotics.ros.Node('/autonomy');
ahsCmdPublisher = robotics.ros.Publisher(autonomyNode,'ahsCmd','terpcopter_msgs/ahsCmd');

stateEstimateSubscriber = robotics.ros.Subscriber(autonomyNode,'stateEstimate','terpcopter_msgs/stateEstimate',{@stateEstimateCallback});

r = robotics.Rate(10);
reset(r);

while(1)
    
    % unpack statestimate
    t = stateEstimateMsg.Time;
    z = stateEstimateMsg.Up;
    % fprintf('Received Msg, Quad Alttiude is : %3.3f m\n', z );

    currentBehavior = 1; 
    
    if mission.config.firstLoop == 1
        disp('Behavior Manager Started')
        % initialize time variables 
        timestamps.initial_event_time = t;  
        timestamps.behavior_switched_timestamp = t;
        timestamps.behavior_satisfied_timestamp = t;
        mission.config.firstLoop = false; % ends the first loop
    end

    name = mission.bhv{currentBehavior}.name;
    flag = mission.bhv{currentBehavior}.completion.status;
    %timestamps = mission.variables;
    ahs = mission.bhv{currentBehavior}.ahs;
    completion = mission.bhv{currentBehavior}.completion;
    
    totalTime = t - timestamps.initial_event_time;
    bhvTime = t - timestamps.behavior_switched_timestamp;
    
    fprintf('Current Behavior: %s\tTime Spent in Behavior: %f\t Total Time of Mission: %f \n\n',name,bhvTime,totalTime); 

    if flag == true
        [mission.bhv] = pop(mission.bhv, t);
    else  
        %Set Handles within each behavior
        
        %switch to 
        %Eval command eval([mission.bhv(CurrentBehavior).name,status)
        switch name
            case 'bhv_takeoff'
                %disp('takeoff behavior');
                [completionFlag] = bhv_takeoff_status(stateEstimateMsg, ahs);
            case 'bhv_hover'
                %disp('hover behavior');
                [completionFlag] = bhv_hover_status(stateEstimateMsg, ahs, completion, t);
            case 'landing'
                %disp('landing behavior');
                [completionFlag] = bhv_landing_status(stateEstimateMsg, ahs);
            otherwise
                
        end
        mission.bhv{currentBehavior}.completion.status = completionFlag;
        z_d = ahs.desiredAltMeters;
    end

    % publish
    ahsCmdMsg = rosmessage('terpcopter_msgs/ahsCmd');
    ahsCmdMsg.AltitudeMeters = z_d;
    send(ahsCmdPublisher, ahsCmdMsg);
    fprintf('Published Ahs Cmd. Alt : %3.3f \n', z_d );
    
    waitfor(r);
end