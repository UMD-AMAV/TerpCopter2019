function [thrustCmd, altErrorHistory] = altitudeControllerPID(gains, altErrorHistory, curTime, zcur, zd, altControlDegbugPublisher)


% unpack variables for convenience
prevTime = altErrorHistory.lastTime;
prevAlt = 
prevAltRate = 
prevAltIntegral = 
prevAltDesired = 

% time elapsed since last control
dt = curTime - prevTime;

% saturation limits
integralTermLimit = 0.3; % units of thrust cmd [-1, 1]

% filters
altTimeConstant = 0.25;
altDesTimeConstatConstant = 1.0;

% small feedforward term to make nominal value (zero error) close to hover
ffterm = -0.30;

% gains
Kp = gains.Kp*dt;
Kd = gains.Kd*dt;
Ki = gains.Ki*dt;

%%  Filters

% low-pass filter desired altitude
alpha_d = dt / ( altDesTimeConstatConstant + dt);
altDesFilt = alpha_d*prevAltDesired + (1-alpha_d)*zd;

% low-pass filter altitude
alpha_a = dt / ( altTimeConstant + dt);
altFilt = alpha_a*prevAltDesired + (1-alpha_a)*zcur;

%% PID Control + feed forward

% errors
altError = altDesFilt - altFilt;


% PID terms
propTerm =  Kp * altError;
derivTerm = Kd * altRateError;
integralTerm = Ki * altRateErrorIntegral;

% saturate integral term
integralTerm =  max(min(integralTerm,integralTermLimit), -integralTermLimit); % 

% PID control, only keep values between 0 and 2
thrustCmdUnsat = propTerm + ...
                 derivTerm +  ...
                 integralTerm + ffterm;

% saturate so it is between 0 and 2, then shift down by 1 
% output is [-1 (zero thrust), 1 (max thrust)]
thrustCmd =  max(min(0.1,thrustCmdUnsat),-1);

%% pack up structure
altErrorHistory.lastTime = curTime;
altErrorHistory.altDes = zd;
altErrorHistory.alt = zcur;
altErrorHistory.altRate = altRateActual;
altErrorHistory.altRateError = altRateError;
altErrorHistory.altRateErrorIntegral = altRateErrorIntegral;

%% display/debug


fprintf('Controller running at %3.2f Hz\n',1/dt);

displayFlag = 1;
if ( displayFlag )
    
    pFile = fopen('altitudeControl.log','a');
    % write csv file
    fprintf(pFile,'%3.3f,',curTime);
    fprintf(pFile,'%3.3f,',zd);
    fprintf(pFile,'%3.3f,',zcur);
    fprintf(pFile,'%3.3f,',altRateDes);
    fprintf(pFile,'%3.3f,',altRateActual);
    fprintf(pFile,'%3.3f,',altRatePrevious);
    fprintf(pFile,'%3.3f,',altRateError);
    fprintf(pFile,'%3.3f,',altRateErrorIntegral);
    fprintf(pFile,'%3.3f,',altRateErrorRate);
    fprintf(pFile,'%3.3f,',propTerm);
    fprintf(pFile,'%3.3f,',derivTerm);
    fprintf(pFile,'%3.3f,',integralTerm);
    fprintf(pFile,'%3.3f,',ffterm);
    fprintf(pFile,'%3.3f,',thrustCmdUnsat);
    fprintf(pFile,'%3.3f,',thrustCmd);
    fprintf(pFile,'%3.3f,',gains.outerLoopKp);
    fprintf(pFile,'%3.3f,',gains.Kp);
    fprintf(pFile,'%3.3f,',gains.Ki);
    fprintf(pFile,'%3.3f,',gains.Kd);
    fprintf(pFile,'%3.3f,',dt);
    fprintf(pFile,'%3.3f,',altRateSatLimit);
    fprintf(pFile,'%3.3f,',minIntegralLimit);
    fprintf(pFile,'%3.3f,',maxIntegralLimit);
    fprintf(pFile,'%3.3f\n',RCtimeConstant);
    fclose(pFile);
    
    
    
    % initialize message to publish
    altControlDebugMsg = rosmessage(altControlDegbugPublisher);
    altControlDebugMsg.T = curTime;
    altControlDebugMsg.Zd = zd;
    altControlDebugMsg.Zcur = zcur;
    altControlDebugMsg.AltRateDes = altRateDes;
    altControlDebugMsg.AltRateActual = altRateActual;
    
    altControlDebugMsg.AltRateError = altRateError;
    altControlDebugMsg.AltRateErrorIntegral = altRateErrorIntegral;
    altControlDebugMsg.AltRateErrorRate = altRateErrorRate;
    
    
    altControlDebugMsg.Proportional = propTerm;
    altControlDebugMsg.Integral = integralTerm;
    altControlDebugMsg.Derivative = derivTerm;

    altControlDebugMsg.ThrustCmdUnsat = thrustCmdUnsat;
    altControlDebugMsg.ThrustCmd = thrustCmd;
    
    send(altControlDegbugPublisher, altControlDebugMsg);
end

endp