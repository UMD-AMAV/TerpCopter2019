%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Node: control
%
% Purpose:  
% The purpose of the control node is to regulate the quadcopter to desired
% setpoints of [altitude, heading, forward speed, crab speed]. We refer to
% this as a 'ahsCmd' which is generated by a behavior in the autonomy node.
% The control node determines the appropriate 'stickCmd' [yaw, pitch, roll,
% thrust] to send to the virtual_transmitter.
%
% Input:
%   - ROS topic: /stateEstimate (generated by estimation)
%   - ROS topic: /ahsCmd (generated by autonomy)
%   
% Output:
%   - ROS topic: /stickCmd (used by virtual_transmitter)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% prepare workspace
clear; close all; clc; format compact;
addpath('../')
params = loadParams();

fileID = fopen('control.txt','w');

global controlParams
controlParams = params.ctrl;
fprintf('Control Node Launching...\n');

% declare global variables
% Determine usage in other scripts - change to local if no other usage
global altitudeErrorHistory;
altitudeErrorHistory.lastVal = 0;
altitudeErrorHistory.lastSum = 0;
altitudeErrorHistory.lastTime = 0;

global crabErrorHistory;
crabErrorHistory.lastVal = 0;
crabErrorHistory.lastTime = 0;

global fwdErrorHistory;
fwdErrorHistory.lastVal = 0;
fwdErrorHistory.lastTime = 0;

% 
% yawError.lastVal = 0;
% yawError.lastSum = 0;
% yawError.lastTime = 0;

% Manually adjust Gains for now 
crabGains.kP = 0.1;
crabGains.kD = 0.0;

fwdGains.kP = 0.1;
fwdGains.kD = 0.1;

% initialize ROS
if(~robotics.ros.internal.Global.isNodeActive)
    launchMaster;
end

% Subscribers
stateEstimateSubscriber = rossubscriber('/stateEstimate');

%ahsCmdSubscriber = rossubscriber('/ahsCmd');

% yawSetpointSubscriber = rossubscriber('/yawSetpoint');

%pidAltSettingSubscriber = rossubscriber('/pidAltSetting');
pidResetPublisher = rospublisher('/pidReset', 'std_msgs/Bool');
pidResetSubscriber = rossubscriber('/pidReset');

pidYawSettingSubscriber = rossubscriber('/pidYawSetting', 'terpcopter_msgs/ffpidSetting');


% Publishers
stickCmdPublisher = rospublisher('/stickCmd', 'terpcopter_msgs/stickCmd');

pause(2)
stickCmdMsg = rosmessage(stickCmdPublisher);
stickCmdMsg.Thrust = 0;
stickCmdMsg.Yaw = 0;

stateEstimateMsg = stateEstimateSubscriber.LatestMessage;

%ahsCmdMsg = ahsCmdSubscriber.LatestMessage;

%pidAltSettingMsg = pidAltSettingSubscriber.LatestMessage;
%pidYawSettingMsg = pidYawSettingSubscriber.LatestMessage;

% yawSetpointMsg = yawSetpointSubscriber.LatestMessage;

% timestamp
t0 = []; timeMatrix=[];
ti= rostime('now');
%abs_t = eval([int2str(ti.Sec) '.' ...
    %int2str(ti.Nsec)]);

abs_t = double(ti.Sec)+double(ti.Nsec)*10^-9;

if isempty(t0), t0 = abs_t; end


% altitudeErrorHistory.lastTime = 0; %stateEstimateMsg.Time;
% display("alt meters")
% display(ahsCmdMsg.AltitudeMeters)
% %display("alt meters")
% %display(altitudeErrorHistory.lastVal)
% altitudeErrorHistory.lastVal = ahsCmdMsg.AltitudeMeters;
% altitudeErrorHistory.lastSum = 0;
% altitudeErrorHistory.lastError = 0;
% u_t_alt = controlParams.altitudeGains.ffterm;

% absoluteYaw = stateEstimateMsg.Yaw;
% ahsCmdMsg.HeadingRad = absoluteYaw;
% yawError.lastTime = stateEstimateMsg.Time;
% yawError.lastVal = 0; %ahsCmdMsg.HeadingRad;
% yawError.lastSum = 0;
u_t_yaw = 0; 

disp('initialize loop');

r = robotics.Rate(10);
reset(r);

send(stickCmdPublisher, stickCmdMsg);

while(1)
    stateEstimateMsg = stateEstimateSubscriber.LatestMessage;
    %ahsCmdMsg = ahsCmdSubscriber.LatestMessage;
    %pidAltSettingMsg = pidAltSettingSubscriber.LatestMessage;
    %pidYawSettingMsg = pidYawSettingSubscriber.LatestMessage;
    
%     yawSetpointMsg = yawSetpointSubscriber.LatestMessage;


    % timestamp
    ti = rostime('now');
    abs_t = double(ti.Sec) + double(ti.Nsec)*10^-9;
    t = abs_t - t0;
    %timeMatrix = [timeMatrix;t];
    %if isempty(t0), t0 = abs_t; end
   
    %fprintf("t %6.4f",t);

    % unpack statestimate
    %t = stateEstimateMsg.Time;
    z = stateEstimateMsg.Range;
    yaw = stateEstimateMsg.Yaw; % - absoluteYaw;
    fwdX = stateEstimateMsg.East;
    crabY = stateEstimateMsg.North;
    
    %fprintf('Current Quad Alttiude is : %3.3f m\n', z );

    % get setpoint
    %z_d = ahsCmdMsg.AltitudeMeters;
    fwdX_d = 0; % forward x for now set to 0 for pose hold 
    crabY_d = 0; % crab y for now set to 0 for pose hold 
   
    % update errors
    %altError = z_d - z;
    crabError = crabY_d - crabY
    fwdError = fwdX_d  - fwdX;
 
    % reset Integral
%     pidResetMsg = rosmessage('std_msgs/Bool');
%     pidResetMsg.Data = false;
%     pidResetMsg = pidResetSubscriber.LatestMessage;
%     if ~isempty(pidResetMsg)
%         if pidResetMsg.Data == true 
%             disp("Resetting PID ...")
%             altitudeErrorHistory.lastVal = ahsCmdMsg.AltitudeMeters;
%             altitudeErrorHistory.lastSum = 0;
%             pidResetMsg.Data = false;
%             send(pidResetPublisher, pidResetMsg);
%         end
%     end

    % compute controls
    % FF_PID(gains, error, newTime, newErrVal)
%     [u_t_alt, altitudeErrorHistory] = FF_PID(pidAltSettingMsg, altitudeErrorHistory, t, altError);
%     disp('pid loop');
%     disp(pidAltSettingMsg)
%     disp('yawSetpoint')
%     disp(yaw_d)
%     disp('yawCurrent')
%     disp(yaw)
      
    [u_crab, crabErrorHistory] = PDCrabcontroller(crabGains, crabErrorHistory, t, crabError);
    
    [u_fwd, fwdErrorHistory] = PDfwdcontroller(fwdGains, fwdErrorHistory, t, fwdError);
    
    % publish
%     stickCmdMsg.Thrust = max(min(2,u_t_alt),0)-1;
%     stickCmdMsg.Yaw = max(-1,min(1,u_t_yaw));
    
    % for now -0.5 be the stick limit 
    %stickCmdMsg.Pitch = max(-0.6,min(1,u_fwd));
    disp('Ucrab');
    disp(u_crab);
    
    stickCmdMsg.Roll = max(-0.6,min(0.8,u_crab))
    
    
%   fprintf('Moving Avg: %3.3f \n', stickCmdThrustAvg); 
    send(stickCmdPublisher, stickCmdMsg);
    %fprintf('Stick Cmd.Thrust : %3.3f, Altitude : %3.3f, Altitude_SP : %3.3f, Error : %3.3f, Yaw : %3.3f \n', stickCmdMsg.Thrust , stateEstimateMsg.Up, z_d, ( z - z_d ), u_t_yaw );

    time = r.TotalElapsedTime;
	%fprintf('Iteration: %d - Time Elapsed: %f\n',i,time)
    disp('Controller');
    
     % [time y u_crab crabError stickCmdMsg.Roll x u_fwd]
    fprintf(fileID,'%5f %5f %5f %5f %5f %5f %5f\n', ...
        t, crabY, u_crab,crabError, stickCmdMsg.Roll, fwdX, u_fwd);
    
	waitfor(r);
end

